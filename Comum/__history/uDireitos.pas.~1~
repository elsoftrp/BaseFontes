unit uDireitos;

interface

uses
  SysUtils, Windows, DBCtrls, FireDAC.Comp.Client ;

  const
    sql = 'select pu.*, p.descricao from ProgramasUsuario pu INNER JOIN Programas p ON p.CodPrograma = pu.CodPrograma '+
           'INNER JOIN Usuarios u ON u.CodUsuario = pu.CodUsuario where p.nomeprograma =:nomeprograma and u.login =:login ';

type
  TDireitos = class
  private
    FIncluir: Boolean;
    FAlterar: Boolean;
    FExcluir: Boolean;
    FVisualizar: Boolean;
    FImprimir: Boolean;
    FChave1: Boolean;
    FChave2: Boolean;
    FChave3: Boolean;
    FChave4: Boolean;
    FPermite: Boolean;
    FCaption: string;
    FNomeJanela: string;
    FUsuario: string;
    FPerfil: string;
    FConexao: TFDConnection;
  protected

  public
    constructor Create(NomeJanela, Usuario, Perfil: string; Conexao: TFDConnection);
    destructor Destroy; override;
    function PodeVerJanela(NomeJanela: string): Boolean;
  published
     property Incluir: Boolean read FIncluir;
     property Alterar: Boolean read FAlterar;
     property Excluir: Boolean read FExcluir;
     property Visualizar: Boolean read FVisualizar;
     property Imprimir: Boolean read FImprimir;
     property Chave1: Boolean read FChave1;
     property Chave2: Boolean read FChave2;
     property Chave3: Boolean read FChave3;
     property Chave4: Boolean read FChave4;
     property Permite: Boolean  read FPermite;
     property Descricao: string read FCaption;
  end;

implementation

{ TDireitos }

constructor TDireitos.Create(NomeJanela, Usuario, Perfil: string; Conexao: TFDConnection);
var
  FQuery: TFDQuery;
begin
  FNomeJanela := NomeJanela;
  FUsuario := Usuario;
  FPerfil  := Perfil;
  FConexao := Conexao;
  FQuery  := TFDQuery.Create(nil);
  FQuery.Connection := FConexao;
  try
    FQuery.SQL.Add(sql);
    FQuery.ParamByName('nomeprograma').AsString := FNomeJanela;
    FQuery.ParamByName('login').AsString        := FUsuario;
    FQuery.Open;
    if FQuery.IsEmpty then
    begin
      FQuery.Close;
      FQuery.ParamByName('nomeprograma').AsString := FNomeJanela;
      FQuery.ParamByName('login').AsString        := FPerfil;
      FQuery.Open;
    end;
    if FQuery.IsEmpty then
    begin
      FIncluir := False;
      FAlterar := False;
      FExcluir := False;
      FVisualizar := False;
      FImprimir := False;
      FChave1 := False;
      FChave2 := False;
      FChave3 := False;
      FChave4 := False;
      FCaption := '';
      FPermite := False;
      Exit;
    end;
    FIncluir   := FQuery.FieldByName('btnIncluir').asBoolean;
    FAlterar   := FQuery.FieldByName('btnAlterar').asBoolean;
    FExcluir   := FQuery.FieldByName('btnExcluir').asBoolean;
    FVisualizar:= FQuery.FieldByName('btnVisualizar').asBoolean;
    FImprimir  := FQuery.FieldByName('btnImprimir').asBoolean;
    FChave1    := FQuery.FieldByName('btnChave1').asBoolean;
    FChave2    := FQuery.FieldByName('btnChave2').asBoolean;
    FChave3    := FQuery.FieldByName('btnChave3').asBoolean;
    FChave4    := FQuery.FieldByName('btnChave4').asBoolean;
    FPermite   := True;
    FCaption   := FQuery.FieldByName('Descricao').asString;
  finally
    FQuery.Close;
    FreeAndNil(FQuery);
  end;
end;

destructor TDireitos.Destroy;
begin
  inherited;
end;

function TDireitos.PodeVerJanela(NomeJanela: string): Boolean;
var
  FQuery: TFDQuery;
begin
  Result  := True;
  FQuery  := TFDQuery.Create(nil);
  FQuery.Connection := FConexao;
  try
    FQuery.SQL.Add(sql);
    FQuery.ParamByName('nomeprograma').AsString := NomeJanela;
    FQuery.ParamByName('login').AsString        := FUsuario;
    FQuery.Open;
    if FQuery.IsEmpty then
    begin
      FQuery.Close;
      FQuery.ParamByName('nomeprograma').AsString := NomeJanela;
      FQuery.ParamByName('login').AsString        := FPerfil;
      FQuery.Open;
    end;
    if FQuery.IsEmpty then
    begin
      Result := False;
    end;
  finally
    FQuery.Close;
    FreeAndNil(FQuery);
  end;
end;

end.
